// 清除浮动
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

// 文本省略
@mixin text-ellipsis($lines: 1) {
  @if $lines == 1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }
}

// 居中对齐
@mixin center($position: absolute) {
  position: $position;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// 垂直居中
@mixin center-vertical($position: absolute) {
  position: $position;
  top: 50%;
  transform: translateY(-50%);
}

// 水平居中
@mixin center-horizontal($position: absolute) {
  position: $position;
  left: 50%;
  transform: translateX(-50%);
}

// 弹性布局
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

// 弹性居中
@mixin flex-center {
  @include flex(row, center, center);
}

// 弹性两端对齐
@mixin flex-between {
  @include flex(row, space-between, center);
}

// 弹性环绕对齐
@mixin flex-around {
  @include flex(row, space-around, center);
}

// 响应式断点
@mixin respond-to($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: #{$breakpoint-sm - 1px}) {
      @content;
    }
  }
  @if $breakpoint == sm {
    @media (min-width: #{$breakpoint-sm}) and (max-width: #{$breakpoint-md - 1px}) {
      @content;
    }
  }
  @if $breakpoint == md {
    @media (min-width: #{$breakpoint-md}) and (max-width: #{$breakpoint-lg - 1px}) {
      @content;
    }
  }
  @if $breakpoint == lg {
    @media (min-width: #{$breakpoint-lg}) and (max-width: #{$breakpoint-xl - 1px}) {
      @content;
    }
  }
  @if $breakpoint == xl {
    @media (min-width: #{$breakpoint-xl}) {
      @content;
    }
  }
}

// 最小宽度断点
@mixin min-width($breakpoint) {
  @media (min-width: $breakpoint) {
    @content;
  }
}

// 最大宽度断点
@mixin max-width($breakpoint) {
  @media (max-width: $breakpoint - 1px) {
    @content;
  }
}

// 按钮样式
@mixin button-variant($bg-color, $text-color: white, $border-color: $bg-color) {
  background-color: $bg-color;
  color: $text-color;
  border: 1px solid $border-color;
  
  &:hover {
    background-color: darken($bg-color, 5%);
    border-color: darken($border-color, 5%);
  }
  
  &:active {
    background-color: darken($bg-color, 10%);
    border-color: darken($border-color, 10%);
  }
  
  &:disabled {
    background-color: lighten($bg-color, 20%);
    border-color: lighten($border-color, 20%);
    cursor: not-allowed;
  }
}

// 输入框样式
@mixin input-variant($border-color: $border-color, $focus-color: $primary-color) {
  border: 1px solid $border-color;
  border-radius: $border-radius-sm;
  padding: $spacing-sm $spacing-md;
  transition: border-color $transition-base;
  
  &:focus {
    border-color: $focus-color;
    box-shadow: 0 0 0 2px rgba($focus-color, 0.2);
  }
  
  &:disabled {
    background-color: $background-color-light;
    color: $text-color-disabled;
    cursor: not-allowed;
  }
}

// 卡片样式
@mixin card($padding: $spacing-md, $radius: $border-radius-base, $shadow: $box-shadow-sm) {
  background-color: $background-color-white;
  border-radius: $radius;
  box-shadow: $shadow;
  padding: $padding;
}

// 头像样式
@mixin avatar($size: $avatar-size-base, $radius: $border-radius-sm) {
  width: $size;
  height: $size;
  border-radius: $radius;
  overflow: hidden;
  display: inline-block;
  vertical-align: middle;
  
  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
}

// 徽章样式
@mixin badge($bg-color: $badge-color, $text-color: white, $size: $badge-size) {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: $size;
  height: $size;
  padding: 0 4px;
  background-color: $bg-color;
  color: $text-color;
  font-size: $font-size-xs;
  font-weight: $font-weight-medium;
  border-radius: $size / 2;
  white-space: nowrap;
}

// 加载动画
@mixin loading-spinner($size: $loading-spinner-size, $color: $loading-spinner-color, $thickness: 2px) {
  width: $size;
  height: $size;
  border: $thickness solid rgba($color, 0.2);
  border-top: $thickness solid $color;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

// 渐变背景
@mixin gradient-background($start-color, $end-color, $direction: to bottom) {
  background: linear-gradient($direction, $start-color, $end-color);
}

// 毛玻璃效果
@mixin backdrop-blur($blur: 10px, $bg-color: rgba(255, 255, 255, 0.8)) {
  background-color: $bg-color;
  backdrop-filter: blur($blur);
  -webkit-backdrop-filter: blur($blur);
}

// 安全区域适配
@mixin safe-area($property: padding, $direction: all) {
  @if $direction == all {
    #{$property}-top: env(safe-area-inset-top);
    #{$property}-right: env(safe-area-inset-right);
    #{$property}-bottom: env(safe-area-inset-bottom);
    #{$property}-left: env(safe-area-inset-left);
  } @else if $direction == top {
    #{$property}-top: env(safe-area-inset-top);
  } @else if $direction == right {
    #{$property}-right: env(safe-area-inset-right);
  } @else if $direction == bottom {
    #{$property}-bottom: env(safe-area-inset-bottom);
  } @else if $direction == left {
    #{$property}-left: env(safe-area-inset-left);
  }
}

// 滚动条样式
@mixin scrollbar($width: 6px, $track-color: $border-color-light, $thumb-color: $border-color) {
  &::-webkit-scrollbar {
    width: $width;
    height: $width;
  }
  
  &::-webkit-scrollbar-track {
    background: $track-color;
    border-radius: $width / 2;
  }
  
  &::-webkit-scrollbar-thumb {
    background: $thumb-color;
    border-radius: $width / 2;
    
    &:hover {
      background: darken($thumb-color, 10%);
    }
  }
}

// 动画缓动函数
$ease-in-quad: cubic-bezier(0.55, 0.085, 0.68, 0.53);
$ease-in-cubic: cubic-bezier(0.55, 0.055, 0.675, 0.19);
$ease-out-quad: cubic-bezier(0.25, 0.46, 0.45, 0.94);
$ease-out-cubic: cubic-bezier(0.215, 0.61, 0.355, 1);
$ease-in-out-quad: cubic-bezier(0.455, 0.03, 0.515, 0.955);
$ease-in-out-cubic: cubic-bezier(0.645, 0.045, 0.355, 1);

// 动画混合
@mixin animation($name, $duration: 1s, $timing-function: ease, $delay: 0s, $iteration-count: 1, $direction: normal, $fill-mode: both) {
  animation: $name $duration $timing-function $delay $iteration-count $direction $fill-mode;
}

// 过渡混合
@mixin transition($property: all, $duration: $transition-base, $timing-function: ease, $delay: 0s) {
  transition: $property $duration $timing-function $delay;
}

// 变换混合
@mixin transform($transforms...) {
  transform: $transforms;
}

// 阴影混合
@mixin box-shadow($shadows...) {
  box-shadow: $shadows;
}
