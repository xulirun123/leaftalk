/**
 * ÂàõÂª∫Áº∫Â§±ÁöÑÈáçË¶ÅË°®
 * Ë°•ÂÖÖÂêàÂπ∂ËøáÁ®ã‰∏≠Âõ†Â§ñÈîÆÁ∫¶ÊùüÂ§±Ë¥•ÁöÑË°®
 */

const mysql = require('mysql2/promise')

const dbConfig = {
    host: 'localhost',
    user: 'root',
    password: 'password',
    database: 'leaftalk-new',
    charset: 'utf8mb4'
}

async function createMissingTables() {
    let connection
    
    try {
        console.log('üîÑ ËøûÊé•Âà∞Êï∞ÊçÆÂ∫ì...')
        connection = await mysql.createConnection(dbConfig)
        
        console.log('üìã ÂàõÂª∫Áº∫Â§±ÁöÑÈáçË¶ÅË°®...')
        
        // 1. Â•ΩÂèãÁ≥ªÁªüË°®
        console.log('üë• ÂàõÂª∫Â•ΩÂèãÁ≥ªÁªüË°®...')
        
        await connection.execute(`
            CREATE TABLE IF NOT EXISTS friendships (
                id INT PRIMARY KEY AUTO_INCREMENT,
                user_id INT NOT NULL,
                friend_id INT NOT NULL,
                status ENUM('pending', 'accepted', 'blocked', 'deleted') DEFAULT 'accepted',
                remark VARCHAR(100) COMMENT 'Â•ΩÂèãÂ§áÊ≥®',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                FOREIGN KEY (friend_id) REFERENCES users(id) ON DELETE CASCADE,
                UNIQUE KEY unique_friendship (user_id, friend_id)
            ) COMMENT='Â•ΩÂèãÂÖ≥Á≥ªË°®'
        `)
        
        await connection.execute(`
            CREATE TABLE IF NOT EXISTS friend_requests (
                id INT PRIMARY KEY AUTO_INCREMENT,
                from_user_id INT NOT NULL,
                to_user_id INT NOT NULL,
                message TEXT,
                status ENUM('pending', 'accepted', 'rejected', 'expired') DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (from_user_id) REFERENCES users(id) ON DELETE CASCADE,
                FOREIGN KEY (to_user_id) REFERENCES users(id) ON DELETE CASCADE
            ) COMMENT='Â•ΩÂèãËØ∑Ê±ÇË°®'
        `)
        
        await connection.execute(`
            CREATE TABLE IF NOT EXISTS blacklist (
                id INT PRIMARY KEY AUTO_INCREMENT,
                user_id INT NOT NULL,
                blocked_user_id INT NOT NULL,
                reason TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                FOREIGN KEY (blocked_user_id) REFERENCES users(id) ON DELETE CASCADE,
                UNIQUE KEY unique_block (user_id, blocked_user_id)
            ) COMMENT='ÈªëÂêçÂçïË°®'
        `)
        
        // 2. ËÅäÂ§©Á≥ªÁªüË°®
        console.log('üí¨ ÂàõÂª∫ËÅäÂ§©Á≥ªÁªüË°®...')
        
        await connection.execute(`
            CREATE TABLE IF NOT EXISTS conversations (
                id INT PRIMARY KEY AUTO_INCREMENT,
                type ENUM('private', 'group') NOT NULL,
                name VARCHAR(100),
                avatar TEXT,
                description TEXT,
                creator_id INT,
                last_message_id INT,
                last_message_at TIMESTAMP NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (creator_id) REFERENCES users(id) ON DELETE SET NULL
            ) COMMENT='‰ºöËØùË°®'
        `)
        
        await connection.execute(`
            CREATE TABLE IF NOT EXISTS conversation_members (
                id INT PRIMARY KEY AUTO_INCREMENT,
                conversation_id INT NOT NULL,
                user_id INT NOT NULL,
                role ENUM('member', 'admin', 'owner') DEFAULT 'member',
                joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_read_at TIMESTAMP NULL,
                is_muted BOOLEAN DEFAULT FALSE,
                FOREIGN KEY (conversation_id) REFERENCES conversations(id) ON DELETE CASCADE,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                UNIQUE KEY unique_member (conversation_id, user_id)
            ) COMMENT='‰ºöËØùÊàêÂëòË°®'
        `)
        
        // 3. ÊúãÂèãÂúàÁ≥ªÁªüË°®
        console.log('üì∏ ÂàõÂª∫ÊúãÂèãÂúàÁ≥ªÁªüË°®...')
        
        await connection.execute(`
            CREATE TABLE IF NOT EXISTS moment_likes (
                id INT PRIMARY KEY AUTO_INCREMENT,
                moment_id INT NOT NULL,
                user_id INT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (moment_id) REFERENCES moments(id) ON DELETE CASCADE,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                UNIQUE KEY unique_like (moment_id, user_id)
            ) COMMENT='ÊúãÂèãÂúàÁÇπËµûË°®'
        `)
        
        await connection.execute(`
            CREATE TABLE IF NOT EXISTS moment_comments (
                id INT PRIMARY KEY AUTO_INCREMENT,
                moment_id INT NOT NULL,
                user_id INT NOT NULL,
                content TEXT NOT NULL,
                reply_to_id INT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (moment_id) REFERENCES moments(id) ON DELETE CASCADE,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                FOREIGN KEY (reply_to_id) REFERENCES moment_comments(id) ON DELETE CASCADE
            ) COMMENT='ÊúãÂèãÂúàËØÑËÆ∫Ë°®'
        `)
        
        // 4. ÂÆ∂Ë∞±Á≥ªÁªüË°®
        console.log('üå≥ ÂàõÂª∫ÂÆ∂Ë∞±Á≥ªÁªüË°®...')
        
        await connection.execute(`
            CREATE TABLE IF NOT EXISTS genealogies (
                id INT PRIMARY KEY AUTO_INCREMENT,
                name VARCHAR(100) NOT NULL,
                description TEXT,
                creator_id INT NOT NULL,
                patriarch_id INT,
                is_main BOOLEAN DEFAULT FALSE,
                status ENUM('active', 'archived') DEFAULT 'active',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (creator_id) REFERENCES users(id) ON DELETE CASCADE,
                FOREIGN KEY (patriarch_id) REFERENCES users(id) ON DELETE SET NULL
            ) COMMENT='ÂÆ∂Ë∞±Ë°®'
        `)
        
        await connection.execute(`
            CREATE TABLE IF NOT EXISTS genealogy_members (
                id INT PRIMARY KEY AUTO_INCREMENT,
                genealogy_id INT NOT NULL,
                user_id INT NOT NULL,
                role ENUM('member', 'admin', 'patriarch') DEFAULT 'member',
                generation INT DEFAULT 1,
                position_in_generation INT DEFAULT 1,
                father_id INT,
                mother_id INT,
                spouse_id INT,
                is_deceased BOOLEAN DEFAULT FALSE,
                birth_date DATE,
                death_date DATE,
                joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (genealogy_id) REFERENCES genealogies(id) ON DELETE CASCADE,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                FOREIGN KEY (father_id) REFERENCES genealogy_members(id) ON DELETE SET NULL,
                FOREIGN KEY (mother_id) REFERENCES genealogy_members(id) ON DELETE SET NULL,
                FOREIGN KEY (spouse_id) REFERENCES genealogy_members(id) ON DELETE SET NULL,
                UNIQUE KEY unique_member (genealogy_id, user_id)
            ) COMMENT='ÂÆ∂Ë∞±ÊàêÂëòË°®'
        `)
        
        // 5. ÊîØ‰ªòÁ≥ªÁªüË°®
        console.log('üí∞ ÂàõÂª∫ÊîØ‰ªòÁ≥ªÁªüË°®...')
        
        await connection.execute(`
            CREATE TABLE IF NOT EXISTS user_wallets (
                id INT PRIMARY KEY AUTO_INCREMENT,
                user_id INT NOT NULL,
                wallet_id INT NOT NULL,
                balance DECIMAL(10,2) DEFAULT 0.00,
                is_default BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                FOREIGN KEY (wallet_id) REFERENCES wallets(id) ON DELETE CASCADE,
                UNIQUE KEY unique_user_wallet (user_id, wallet_id)
            ) COMMENT='Áî®Êà∑Èí±ÂåÖÂÖ≥ËÅîË°®'
        `)
        
        await connection.execute(`
            CREATE TABLE IF NOT EXISTS transactions (
                id INT PRIMARY KEY AUTO_INCREMENT,
                user_id INT NOT NULL,
                type ENUM('income', 'expense') NOT NULL,
                amount DECIMAL(10,2) NOT NULL,
                description TEXT,
                status ENUM('pending', 'completed', 'failed') DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
            ) COMMENT='‰∫§ÊòìËÆ∞ÂΩïË°®'
        `)
        
        // 6. Â™í‰ΩìÊñá‰ª∂Ë°®
        console.log('üìÅ ÂàõÂª∫Â™í‰ΩìÊñá‰ª∂Ë°®...')
        
        await connection.execute(`
            CREATE TABLE IF NOT EXISTS media_files (
                id INT PRIMARY KEY AUTO_INCREMENT,
                user_id INT NOT NULL,
                filename VARCHAR(255) NOT NULL,
                original_name VARCHAR(255),
                file_path TEXT NOT NULL,
                file_size BIGINT,
                mime_type VARCHAR(100),
                type ENUM('image', 'video', 'audio', 'document') NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
            ) COMMENT='Â™í‰ΩìÊñá‰ª∂Ë°®'
        `)

        // Âè∂ËØ≠Âè∑‰øÆÊîπÂéÜÂè≤Ë°®
        console.log('üÜî ÂàõÂª∫Âè∂ËØ≠Âè∑‰øÆÊîπÂéÜÂè≤Ë°®...')
        await connection.execute(`
            CREATE TABLE IF NOT EXISTS yeyu_id_changes (
                id INT PRIMARY KEY AUTO_INCREMENT,
                user_id INT NOT NULL,
                old_yeyu_id VARCHAR(50) NOT NULL,
                new_yeyu_id VARCHAR(50) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                INDEX idx_user_year (user_id, created_at)
            ) COMMENT='Âè∂ËØ≠Âè∑‰øÆÊîπÂéÜÂè≤Ë°®'
        `)

        console.log('‚úÖ ÊâÄÊúâÁº∫Â§±Ë°®ÂàõÂª∫ÂÆåÊàê')
        
        // Ëé∑ÂèñÊúÄÁªàÁªüËÆ°
        const [tableCount] = await connection.execute('SHOW TABLES')
        const [userCount] = await connection.execute('SELECT COUNT(*) as count FROM users')
        
        console.log(`üìä ÊúÄÁªàÁªüËÆ°:`)
        console.log(`   üìã Ë°®Êï∞Èáè: ${tableCount.length}`)
        console.log(`   üë§ Áî®Êà∑Êï∞Èáè: ${userCount[0].count}`)
        
        console.log(`üìã ÂÆåÊï¥Ë°®ÂàóË°®:`)
        tableCount.forEach((table, index) => {
            const tableName = table[`Tables_in_leaftalk-new`]
            console.log(`   ${index + 1}. ${tableName}`)
        })
        
    } catch (error) {
        console.error('‚ùå ÂàõÂª∫Ë°®Â§±Ë¥•:', error.message)
        throw error
    } finally {
        if (connection) {
            await connection.end()
        }
    }
}

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§ËÑöÊú¨
if (require.main === module) {
    createMissingTables()
        .then(() => {
            console.log('üéâ Áº∫Â§±Ë°®ÂàõÂª∫ÊàêÂäüÔºÅ')
            process.exit(0)
        })
        .catch((error) => {
            console.error('üí• ÂàõÂª∫Ë°®Â§±Ë¥•:', error)
            process.exit(1)
        })
}

module.exports = { createMissingTables }
